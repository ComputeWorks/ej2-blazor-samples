@page "/Schedule/Editorvalidation"

@using Syncfusion.EJ2.Blazor.Schedule

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Field Validation";
    SampleBrowser.CurrentControlName = "Scheduler";
    SampleBrowser.CurrentControlCategory = "Scheduler";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Schedule;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
            This demo shows the way of adding default and custom validation rules to the editor fields of Scheduler.
        </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
            In this demo, the specific fields of Scheduler editor window such as
            <code>subject</code>,
            <code>location</code>,
            <code>description</code>,
            <code>startTime</code> and
            <code>endTime</code> are made to undergo validation such that if it is left as blank, then the default required validation message will
            be displayed in a separate tooltip, on clicking a save button.
        </p>
        <p>
            Additionally, the regex condition has been added to the
            <code>location</code> field, so that if any special characters are typed into it, then the custom validation message will be displayed.
            The
            <code>description</code> field has been validated to restrict the character count to be typed into it between 5 and 500 and not beyond that.
            This validation can be given by making use of the
            <code>validation</code> API available within each
            <code>fields</code> of
            <code>eventSettings</code> property.
        </p>
        <p>
            Apart from this validation feature, the built-in validation has been provided to the start and end time fields - so that,
            when the selected end time occurs before the start time, a validation message will be displayed as well as when some
            unwanted characters are typed into the date fields, the invalid date message will be alerted.
        </p>"
    };
}
@*End:Hidden*@

<div class="col-lg-12 control-section">
    <div class="schedule-wrapper">
        <EjsSchedule ID="schedule" TValue="ScheduleData.AppointmentData" Width="100%" Height="650px" SelectedDate="@(new DateTime(2019, 1, 10))">
            <ScheduleEventSettings DataSource="@DataSource">
                <ScheduleField>
                    <FieldSubject Name="Subject" Validation="@ValidationRules"></FieldSubject>
                    <FieldLocation Name="Location" Validation="@locationValidationRules"></FieldLocation>
                    <FieldDescription Name="Description" Validation="@descriptionValidationRules"></FieldDescription>
                    <FieldStartTime Name="StartTime" Validation="@ValidationRules"></FieldStartTime>
                    <FieldEndTime Name="EndTime" Validation="@ValidationRules"></FieldEndTime>
                </ScheduleField>
            </ScheduleEventSettings>
        </EjsSchedule>
    </div>
</div>

@code{
    Dictionary<string, object> ValidationRules = new Dictionary<string, object>() { { "required", true } };
    Dictionary<string, object> locationValidationRules = new Dictionary<string, object>() { { "required", true }, { "regex", new string[] { "^[a-zA-Z0-9- ]*$", "Special character(s) not allowed in this field" } } };
    Dictionary<string, object> descriptionValidationRules = new Dictionary<string, object>() { { "required", true }, { "minLength", 5 }, { "maxLength", 500 } };
    public List<ScheduleData.AppointmentData> DataSource = new ScheduleData().GetScheduleData();
}
