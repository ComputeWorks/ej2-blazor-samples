@page "/Schedule/EditorPopupTemplate"

@using Syncfusion.EJ2.Blazor.Schedule
@using Syncfusion.EJ2.Blazor.Calendars
@using Syncfusion.EJ2.Blazor.DropDowns
@using Syncfusion.EJ2.Blazor.Inputs

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Editor Template";
    SampleBrowser.CurrentControlName = "Scheduler";
    SampleBrowser.CurrentControlCategory = "Scheduler";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Schedule;
    SampleBrowser.ActionDescription = new string[] {
        @"<p>
   This demo illustrates the way of customizing the default editor window with custom template option and the customized
   design is automatically replaced onto the usual event editor. Here, a doctor's daily appointment with his patients
   is listed out and shaded with specific color based on its status.

</p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
            In this demo, the event window is customized based on the doctor's required appointment related fields which can be achieved
            by making use of the <code>EditorTemplate</code> API. Here, the custom design is built with the required field.
        </p>
        <p>
            Each field defined through it should contain the <code>e-field</code> class, so as to allow the processing of those fields in the default event object from internal source. So that this customized fields will be replaced onto the default editor window.
        </p>
        <p>
            As we are using our Syncfusion sub-components within this editor in this demo, therefore the custom defined form elements
            needs to be configured as required Syncfusion components such as DropDownList and DateTimePicker. This particular step can be skipped, if the user needs to simply use the normal form design with applicable
            fields.
        </p>"
    };
}
@*End:Hidden*@

<div class="control-section">
    <div class="content-wrapper">
        <EjsSchedule TValue="ScheduleData.DoctorsEventData" ModelType="@Model" Width="100%" Height="650px" SelectedDate="@(new DateTime(2018, 2, 15))">
            <ScheduleTemplates>
                <EditorTemplate>
                    <table class="custom-event-editor" width="100%" cellpadding="5">
                        <tbody>
                            <tr>
                                <td class="e-textlabel">Summary</td>
                                <td colspan="4">
                                    <EjsTextBox Id="Subject" CssClass="e-field e-input" Value="@((context as TemplateArgs).Subject)"></EjsTextBox>
                                </td>
                            </tr>
                            <tr>
                                <td class="e-textlabel">Status</td>
                                <td colspan="4">
                                    <EjsDropDownList ID="EventType" DataSource="@StatusData" placeholder="Choose status" CssClass="e-field" Value="@((context as TemplateArgs).EventType)" HtmlAttributes="@EventType">
                                        <DropDownListFieldSettings Value="id"></DropDownListFieldSettings>
                                    </EjsDropDownList>
                                </td>
                            </tr>
                            <tr>
                                <td class="e-textlabel">From</td>
                                <td colspan="4">
                                    <EjsDateTimePicker ID="StartTime" HtmlAttributes="@StartName" CssClass="e-field" Value="@((context as TemplateArgs).StartTime)"></EjsDateTimePicker>
                                </td>
                            </tr>
                            <tr>
                                <td class="e-textlabel">To</td>
                                <td colspan="4">
                                    <EjsDateTimePicker ID="EndTime" HtmlAttributes="@EndName" CssClass="e-field" Value="@((context as TemplateArgs).EndTime)"></EjsDateTimePicker>

                                </td>
                            </tr>
                            <tr>
                                <td class="e-textlabel">Reason</td>
                                <td colspan="4">
                                    <textarea id="Description" class="e-field e-input" name="Description" rows="3" cols="50" value="@((context as TemplateArgs).Description)"
                                              style="width: 100%; height: 60px !important; resize: vertical"></textarea>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </EditorTemplate>
            </ScheduleTemplates>
            <ScheduleEventSettings TValue="ScheduleData.DoctorsEventData" DataSource="@DataSource">
            </ScheduleEventSettings>
        </EjsSchedule>
    </div>
</div>
@code{
    public class EventFields
    {
        public string id { get; set; }
        public string text { get; set; }
    }
    List<EventFields> StatusData = new List<EventFields>() {
            new EventFields(){ id= "New", text= "New" },
            new EventFields(){ id= "Requested", text= "Requested" },
            new EventFields(){ id= "Confirmed", text= "Confirmed" },
        };
    Dictionary<string, object> StartName = new Dictionary<string, object>()
    {
        {"data-name","StartTime"},
    };
    Dictionary<string, object> EndName = new Dictionary<string, object>()
    {
        {"data-name","EndTime"},
    };
    Dictionary<string, object> EventType = new Dictionary<string, object>()
    {
        {"data-name","EventType"},
    };

    List<ScheduleData.DoctorsEventData> DataSource = new ScheduleData().GetDoctorsEventData();
    public class TemplateArgs
    {
        public string Subject { get; set; }
        public string EventType { get; set; }
        public DateTime? StartTime { get; set; }
        public DateTime? EndTime { get; set; }
        public string Description { get; set; }
    }
    public TemplateArgs Model = new TemplateArgs();
}